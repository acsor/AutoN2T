#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2018 Oscar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from __future__ import print_function

import argparse
import os
import sys
from os import access, getcwd, listdir, remove
from subprocess import call

from os.path import abspath, dirname, join

__version__ = "0.5.3"
SCRIPT_ROOT = abspath(dirname(__file__))

CONFIG_FILENAME = ".n2tconfig"
# Config key of the Hardware Simulator executable path
KEY_HWEX = "hardware_simulator_executable"

ACT_EXECUTABLE = "executable"
ACT_REPORT = "report"
ACT_CONFIG = "show_config"
ACT_UNINSTALL = "uninstall"


class ConfigManager(object):
    DEFAULT_CONFIG_PATH = join(SCRIPT_ROOT, CONFIG_FILENAME)
    
    def __init__(self, configpath=None):
        """
        Manages the project configuration in a ``key=value`` format.

        :param configpath: file path of the script configuration.
        """
        self._config = dict()

        if not configpath:
            self._configpath = self.DEFAULT_CONFIG_PATH
        else:
            configdir = dirname(configpath)

            if not access(configdir, os.F_OK):
                raise OSError("Directory %s does not exist" % configdir)
            elif not access(configdir, os.R_OK | os.W_OK):
                raise OSError("Directory %s is not RW" % configdir)
            else:
                self._configpath = configpath

        self._parse_config()

    def __getitem__(self, key):
        if key in self._config:
            return self._config[key]

        raise ValueError("key %s not found in config" % key)

    def __setitem__(self, key, value):
        self._config[key] = value

    def __contains__(self, key):
        return key in self._config

    def __del__(self):
        self._config = None
        self._configpath = None

    def __iter__(self):
        """Return an iterator of ``(key, value)`` pairs."""
        for key, value in self._config.items():
            yield key, value

    def write(self):
        with open(self._configpath, "wt") as outstream:
            for key, value in self._config.items():
                outstream.write("%s=%s\n" % (key, value))

        self._parse_config()

    @property
    def configpath(self):
        return self._configpath
    
    def _parse_config(self):
        """
        Parses the configuration from a file input to ``__init__()`` and reads
        it into memory.
        """
        if not access(self._configpath, os.F_OK):
            # If the file does not exist, we create it empty and exit
            with open(self._configpath, "wt") as outstream:
                outstream.write("")
        elif not access(self._configpath, os.R_OK):
            raise OSError("%s has no read permissions" % self._configpath)
        else:
            with open(self._configpath) as instream:
                for l in instream:
                    if l and not l.isspace() and not l.startswith("#"):
                        key, value = l.split("=", 1)

                        self._config[key.strip()] = value.strip()


def print_report(c, path, colwidth=20):
    """
    Subroutine to print a Nand2Tetris Hardware Simulator report on ``path``
    by means of the configuration from ``c``.

    :param c: ``ConfigManager`` instance.
    :param path: directory path containing ``*.tst`` files.
    :param colwidth: minimum width (in units of spaces) of the first column.
    :return: exit status of the operation.
    """
    extension = ".tst"
    # Whether *.tst files have been reported in the current directory
    tst_found = False

    if KEY_HWEX not in c:
        print(
            "No executable found for the Hardware Simulator. Please rerun"
            " the script with the %s option." % ACT_EXECUTABLE,
            file=sys.stderr
        )

        return 1

    print("[Hardware Simulator executable in %s]\n" % c[KEY_HWEX])

    for e in listdir(path):
        if e.endswith(extension):
            tst_found = True
            space_padding = max(colwidth - len(e), 0)
            fullpath = abspath(join(path, e))

            print(e, " " * space_padding, end="", flush=True)
            call(
                [c[KEY_HWEX], fullpath], stdout=sys.stdout, stderr=sys.stderr
            )

    if not tst_found:
        print("No %s files found in %s" % (extension, path))

    return 0


def uninstall(config):
    """
    Uninstalls the file resources associated with the script and reports the
    status to the console.

    :param config: ``ConfigManager`` instance.
    :return:
        * ``0``   In case of success
        * ``1``   In case of failure
        * ``2``   If no files to remove where found
    """
    configpath = ConfigManager.DEFAULT_CONFIG_PATH

    # Note that configpath may always exist, as ConfigManager recreates it
    # while instantiating a new instance of its own
    if configpath and access(configpath, os.F_OK):
        print("Removing %s..." % configpath, end=" ")

        try:
            remove(configpath)
        except OSError as e:
            print("failed: %s" % e.strerror)
            return 1

        print("OK.")

        return 0
    else:
        print("No files found to remove.", file=sys.stderr)
        return 2


def main():
    """
    :return: exit status code of the program.
    """
    parser = argparse.ArgumentParser(
        description="Reports the status of .tst files of a Nand2Tetris "
        "assignment",
        epilog="Version %s" % __version__
    )
    subparsers = parser.add_subparsers(title="Commands", dest="action")
    subparsers.required = True

    executable_parser = subparsers.add_parser(
        ACT_EXECUTABLE, help="Store the new location of the Hardware Simulator"
        " executable (or display the existing one with no arguments) and exit."
    )
    report_parser = subparsers.add_parser(
        ACT_REPORT, help="Run the Hardware Simulator on a batch of files and"
        " report their individual outcome."
    )
    config_parser = subparsers.add_parser(
        ACT_CONFIG, help="Print out the configuration settings stored in %s." %
        CONFIG_FILENAME
    )
    uninstall_parser = subparsers.add_parser(
        ACT_UNINSTALL, help="Uninstall the files associated with this script."
    )

    executable_parser.add_argument("filepath", nargs='?', metavar="FILE PATH")
    report_parser.add_argument(
        "directory", nargs='?', default=getcwd(), metavar="DIR",
        help="Directory where to look for .tst files (defaults to ./)."
    )

    c = ConfigManager()
    args = parser.parse_args()

    if args.action == ACT_EXECUTABLE:
        if args.filepath:
            args.filepath = abspath(args.filepath)

            if not access(args.filepath, os.F_OK | os.X_OK):
                print(
                    "Error: %s does not exist or has no execute permissions." %
                    args.filepath, file=sys.stderr
                )

                return 1
            else:
                c[KEY_HWEX] = args.filepath
                c.write()
        elif KEY_HWEX in c:
            print("HardwareSimulator executable stored in", c[KEY_HWEX])
        else:
            print("No executable has been set yet.")

            return 1

        return 0
    elif args.action == ACT_REPORT:
        return print_report(c, args.directory)
    elif args.action == ACT_CONFIG:
        print("[Config settings stored in %s]\n" % c.configpath)

        for key, value in c:
            print("%s=%s" % (key, value))
    elif args.action == ACT_UNINSTALL:
        uninstall(c)
    else:
        print("Action %s not recognized" % args.action, file=sys.stderr)
        return 1


if __name__ == "__main__":
    exit(main())
